{"version":3,"sources":["BottomRow.js","App.js","serviceWorker.js","index.js"],"names":["BottomRow","react_default","a","createElement","className","App","_useState","useState","_useState2","Object","slicedToArray","homeScore","setHomeScore","_useState3","_useState4","awayScore","setAwayScore","_useState5","_useState6","src_BottomRow","onClick","Promise","resolve","reject","window","confirm","then","resOfWindowConfirm","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a19e7527.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst BottomRow = () => {\n  return (\n    <div className=\"bottomRow\">\n      <div className=\"down\">\n        <h3 className=\"down__title\">Down</h3>\n        <div className=\"down__value\">3</div>\n      </div>\n      <div className=\"toGo\">\n        <h3 className=\"toGo__title\">To Go</h3>\n        <div className=\"toGo__value\">7</div>\n      </div>\n      <div className=\"ballOn\">\n        <h3 className=\"ballOn__title\">Ball on</h3>\n        <div className=\"ballOn__value\">21</div>\n      </div>\n      <div className=\"quarter\">\n        <h3 className=\"quarter__title\">Quarter</h3>\n        <div className=\"quarter__value\">4</div>\n      </div>\n    </div>\n  );\n};\n\nexport default BottomRow;\n","//TODO: STEP 1 - Import the useState hook.\nimport React, {useState} from \"react\";\nimport \"./App.css\";\nimport BottomRow from \"./BottomRow\";\n\nfunction App() {\n  //TODO: STEP 2 - Establish your applictaion's state with some useState hooks.  You'll need one for the home score and another for the away score.\n  const [homeScore, setHomeScore]= useState(0);\n  const [awayScore, setAwayScore]= useState(0);\n  const [homeTouchdown, setHomeTouchdown]= useState(false);\n  let touchdownAwayTeam= false;\n  return (\n    <div className=\"container\">\n      <section className=\"scoreboard\">\n        <div className=\"topRow\">\n          <div className=\"home\">\n            <h2 className=\"home__name\">Lions</h2>\n\n            {/* TODO STEP 3 - We need to change the hardcoded values in these divs to accept dynamic values from our state. */}\n\n            <div className=\"home__score\">{homeScore}</div>\n          </div>\n          <div className=\"timer\">00:03</div>\n          <div className=\"away\">\n            <h2 className=\"away__name\">Tigers</h2>\n            <div className=\"away__score\">{awayScore}</div>\n          </div>\n        </div>\n        <BottomRow />\n      </section>\n      <section className=\"buttons\">\n        <div className=\"homeButtons\">\n          {/* TODO STEP 4 - Now we need to attach our state setter functions to click listeners. */}\n          <button className=\"homeButtons__touchdown\" onClick={()=> {\n            let mySecondPromise = new Promise((resolve, reject) => {\n              resolve(window.confirm(\"Did the Home Team Score a field goal?\"));\n            })\n            mySecondPromise.then((resOfWindowConfirm) =>  (resOfWindowConfirm)? setHomeScore(homeScore + 7) : setHomeScore(homeScore + 6)) \n          }}>\n            Home Touchdown\n          </button>\n          <button className=\"homeButtons__fieldGoal\" onClick={()=> setHomeScore(homeScore + 3)}>\n            Home Field Goal\n          </button>\n          <button className=\"homeButtons__twoPointConversion\" onClick={()=> setHomeScore(homeScore + 2)}>\n            2 Point Conversion\n          </button>\n        </div>\n        <div className=\"awayButtons\">\n          <button className=\"awayButtons__touchdown\" onClick={()=> {\n            let myFirstPromise = new Promise((resolve, reject) => {\n              resolve(window.confirm(\"Did the Away Team Score a field goal?\"));\n            })\n            myFirstPromise.then((resOfWindowConfirm) =>  (resOfWindowConfirm)? setAwayScore(awayScore + 7) : setAwayScore(awayScore + 6)) \n          }}>\n            Away Touchdown\n          </button>\n          <button className=\"awayButtons__fieldGoal\" onClick={()=> {setAwayScore(awayScore + 3)}}>\n            Away Field Goal\n          </button>\n          <button className=\"awayButtons__twoPointConversion\" onClick={()=> setAwayScore(awayScore + 2)}>\n            2 Point Conversion\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}